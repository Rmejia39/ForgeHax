package dev.fiki.forgehax.main.mods.exploit;

import dev.fiki.forgehax.api.cmd.flag.EnumFlag;
import dev.fiki.forgehax.api.cmd.settings.BooleanSetting;
import dev.fiki.forgehax.api.event.SubscribeListener;
import dev.fiki.forgehax.api.events.entity.LocalPlayerUpdateEvent;
import dev.fiki.forgehax.api.events.world.WorldLoadEvent;
import dev.fiki.forgehax.api.mod.Category;
import dev.fiki.forgehax.api.mod.ToggleMod;
import dev.fiki.forgehax.api.modloader.RegisterMod;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CMoveVehiclePacket;

import static dev.fiki.forgehax.main.Common.*;

@RegisterMod(
    name = "RiderDesync",
    description = "For entity force dismounting",
    category = Category.EXPLOIT
)
public class RiderDesync extends ToggleMod {

  private final BooleanSetting auto_update = newBooleanSetting()
      .name("auto-update")
      .description("Automatically update entity on dismount")
      .defaultTo(true)
      .build();

  private Entity dismountedEntity = null;
  private boolean forceUpdate = false;

  {
    newSimpleCommand()
        .name("remount")
        .description("Remount entity")
        .flag(EnumFlag.EXECUTOR_MAIN_THREAD)
        .executor(args -> {
          if (!isEnabled()) {
            printWarning("Mod not enabled");
            return;
          }

          if (getLocalPlayer() == null || getWorld() == null) {
            printWarning("Must be ingame to use this command.");
            return;
          }

          if (dismountedEntity == null) {
            printWarning("No entity mounted");
            return;
          }

          getWorld().addFreshEntity(dismountedEntity);
          getLocalPlayer().startRiding(dismountedEntity);

          printInform("Remounted entity " + dismountedEntity.getName());
        })
        .build();

    newSimpleCommand()
        .name("dismount")
        .description("Dismount entity")
        .flag(EnumFlag.EXECUTOR_MAIN_THREAD)
        .executor(args -> {
          if (!isEnabled()) {
            printWarning("Mod not enabled");
            return;
          }

          if (getLocalPlayer() == null || getWorld() == null) {
            printWarning("Must be ingame to use this command.");
            return;
          }

          Entity mounted = getLocalPlayer().getVehicle();

          if (mounted == null) {
            printWarning("No entity mounted");
            return;
          }

          dismountedEntity = mounted;
          getLocalPlayer().stopRiding();
          mounted.remove();

          if (auto_update.getValue()) {
            forceUpdate = true;
            printInform("Dismounted entity " + mounted.getName() + " and forcing entity updates");
          } else {
            printInform("Dismounted entity " + mounted.getName());
          }
        })
        .build();

    newSimpleCommand()
        .name("force-update")
        .description("Force dismount entity")
        .flag(EnumFlag.EXECUTOR_MAIN_THREAD)
        .executor(args -> {
          if (!isEnabled()) {
            printWarning("Mod not enabled");
            return;
          }

          if (getLocalPlayer() == null || getWorld() == null) {
            printWarning("Must be ingame to use this command.");
            return;
          }

          if (dismountedEntity == null) {
            printWarning("No entity to force remount");
            return;
          }

          forceUpdate = !forceUpdate;

          printInform("Force mounted entity = %s", forceUpdate ? "true" : "false");
        })
        .build();

    newSimpleCommand()
        .name("reset")
        .description("Reset the currently stored riding entity")
        .flag(EnumFlag.EXECUTOR_MAIN_THREAD)
        .executor(args -> {
          this.dismountedEntity = null;
          this.forceUpdate = false;
          printInform("Saved riding entity reset");
        })
        .build();
  }

  @Override
  public String getDebugDisplayText() {
    return super.getDebugDisplayText() + String.format(" [e = %s fu = %s]",
        dismountedEntity == null ? "null" : dismountedEntity.getName(),
        forceUpdate ? "true" : "false");
  }

  @SubscribeListener
  public void onTick(LocalPlayerUpdateEvent event) {
    if (dismountedEntity == null || getMountedEntity() != null) {
      this.dismountedEntity = null;
      this.forceUpdate = false;
      return;
    }

    if (forceUpdate && dismountedEntity != null) {
      dismountedEntity.moveTo(getLocalPlayer().getX(), getLocalPlayer().getY(), getLocalPlayer().getZ());
      sendNetworkPacket(new CMoveVehiclePacket(dismountedEntity));
    }
  }

  @SubscribeListener
  public void onWorldUnload(WorldLoadEvent event) {
    this.dismountedEntity = null;
    this.forceUpdate = false;
  }
}
